== Vài mẹo Cơ bản ==

Thay vì lao vào cả một "biển lệnh" của Git, hãy sử dụng các ví dụ cơ bản để bắt đầu.
Mặc dù chúng rất đơn giản, nhưng tất cả chúng đều rất hữu dụng.
Quả thực là vậy, trong tháng đầu tiên sử dụng Git Tôi chưa bao giờ vượt qua những gì nói trong chương này.

=== Ghi lại State ===

About to attempt something drastic? Trước khi làm điều đó, thực hiện với tất cả các tệp tin trong thư mục hiện hành bằng cách:

 $ git init
 $ git add .
 $ git commit -m "My first backup"

Bây giờ nếu như các thay đổi của bạn không như mong đợi, hãy phục hồi lại bản cũ:

 $ git reset --hard

Lưu lại state lần nữa:

 $ git commit -a -m "Another backup"

=== Thêm, Xóa, Đổi tên ===

Lệnh ở trên chỉ giữ dấu vết các tệp tin và hiện diện tại thời điểm vạn chạy lệnh *git add*. Nếu bạn thêm các tệp tin hay thư mục, bạn sẽ phải thông báo với Git:

 $ git add readme.txt Documentation

Tương tự như vậy, nếu bạn muốn Git bỏ qua các tệp tin nào đó:

 $ git rm kludge.h obsolete.c
 $ git rm -r incriminating/evidence/

Git xóa bỏ những tệp tin nếu như bạn chưa làm vậy.

Đổi tên tệp tin thì cũng giống như là việc bạn gỡ bỏ tên cũ và đặt vào tên mới. Sử dụng lệnh *git mv* có cú pháp rất giống lệnh *mv*. Ví dụ:

 $ git mv bug.c feature.c

=== Advanced Undo/Redo ===

Đôi khi bạn chỉ muốn quay trở lại và bỏ đi những thay đổi trong quá khứ tại một thời điểm nào đó bởi vì chúng tất cả đã sai. Thì lệnh:

 $ git log

sẽ hiển thị cho bạn danh sách các lần commit gần đây cùng với giá trị băm SHA1:

----------------------------------
commit 766f9881690d240ba334153047649b8b8f11c664
Author: Bob <bob@example.com>
Date:   Tue Mar 14 01:59:26 2000 -0800

    Replace printf() with write().

commit 82f5ea346a2e651544956a8653c0f58dc151275c
Author: Alice <alice@example.com>
Date:   Thu Jan 1 00:00:00 1970 +0000

    Initial commit.
----------------------------------

Chỉ vài ký tự của giá trị băm là đủ để chỉ ra một commit;
một cách khác là chép và dán giá trị băm. Gõ:

 $ git reset --hard 766f

để phục hồi lại state đã chỉ ra và xóa bỏ tất cả các lần commit mới hơn kể từ đó.

Một lúc nào đó bạn lại muốn nhảy tới một cái cũ hơn. Trong trường hợp này thì gõ:

 $ git checkout 82f5

This takes you back in time, while preserving newer commits. However, like time travel in a science-fiction movie, if you now edit and commit, you will be in an alternate reality, because your actions are different to what they were the first time around.

This alternate reality is called a 'branch', và <<branch, chúng ta có nhiều điều để nói về nó sau này>>. Bây giờ, chỉ cần nhớ là

 $ git checkout master

sẽ mang chúng ta trở về hiện tại. Also, to stop Git complaining, always
commit or reset your changes before running checkout.

To take the computer game analogy again:

- *`git reset --hard`*: load an old save and delete all saved games newer than the one just loaded.

- *`git checkout`*: load an old game, but if you play on, the game state will deviate from the newer saves you made the first time around. Any saved games you make now will end up in a separate branch representing the alternate reality you have entered. <<branch,We deal with this later>>.

You can choose only to restore particular files and subdirectories by appending them after the command:

 $ git checkout 82f5 some.file another.file

Hãy cẩn thận, như là lệnh *checkout* có thể âm thầm ghi đè lên các tệp tin. Để
ngăn ngừa rủi ro như thế, hãy commit trước khi chạy lệnh checkout, nhất là khi
mới học sử dụng Git. Tóm lại, bất kỳ khi nào bạn không chắc chắn về một lệnh nào đó, dù có là lệnh của Git hay không, đầu tiên hãy chạy lệnh *git commit -a*.

Bạn không thích việc cắt dán ư? Hãy sử dụng:

 $ git checkout :/"My first b"

để nhảy tới lần commit mà bắt đầu với thông điệp đã cho.
Bạn cũng có thể yêu cầu state thứ 5 kể từ cuối cùng:

 $ git checkout master~5

=== Reverting ===

In a court of law, events can be stricken from the record. Likewise, you can pick specific commits to undo.

 $ git commit -a
 $ git revert 1b6d

will undo just the commit with the given hash. The revert is recorded as a new
commit, which you can confirm by running *git log*.

=== Changelog Generation ===

Một số dự án yêu cầu có http://en.wikipedia.org/wiki/Changelog[changelog].
Tạo một cái bằng cách gõ:

 $ git log > ChangeLog

=== Tải về các Tệp tin ===

Lấy về một bản sao của một dự án quản lý bằng Git bằng cách gõ:

 $ git clone git://server/path/to/files

Ví dụ, để lấy tất cả các tệp tin mà tôi đã dùng để tạo ra cho trang mạng này là:

 $ git clone git://git.or.cz/gitmagic.git

Chúng ta sẽ có nhiều điều để nói về lệnh *clone* sớm thôi.

=== The Bleeding Edge ===

Nếu bạn đã tải về một bản sao của một dự án sử dụng *git clone*, bạn có thể nâng cấp lên phiên bản cuối cùng với lệnh:

 $ git pull

=== Instant Publishing ===

Suppose you've written a script you'd like to share with others. You could just tell them to download from your computer, but if they do so while you're improving the script or making experimental changes, they could wind up in trouble.  Of course, this is why release cycles exist. Developers may work on a project frequently, but they only make the code available when they feel it is presentable.

Thực hiện điều này với Git, trong thư mục nơi script của bạn nằm trong:

 $ git init
 $ git add .
 $ git commit -m "First release"

Sau đó nói với những người sử dụng hãy chạy:

 $ git clone your.computer:/path/to/script

để tải script về. This assumes they have ssh access. Nếu không, chạy *git daemon* và nói với người sử dụng là chạy lệnh sau để thay thế:

 $ git clone git://your.computer/path/to/script

Kể từ lúc này, bất cứ khi nào mã nguồn của bạn đã sẵn sàng, chỉ việc thực hiện:

 $ git commit -a -m "Next release"

và những người sử dụng có thể cập nhật dữ liệu của họ bằng cách chuyển tới thư mục làm việc tương ứng và gõ:

 $ git pull

Your users will never end up with a version of your script you don't want them to see.

=== Tôi Phải Làm Gì? ===

Tìm tất cả các thay đổi kề từ lần bạn commit lần cuối bằng lệnh:

 $ git diff

Hay từ hôm qua:

 $ git diff "@{yesterday}"

Hay giữa một bản nào đó và bản trước đây 2 bản:

 $ git diff 1b6d "master~2"

In each case the output is a patch that can be applied with *git apply*.
Try also:

 $ git whatchanged --since="2 weeks ago"

Thường thường, tôi sẽ dùng http://sourceforge.net/projects/qgit[qgit]
để thay thế cách ở trên, bởi vì nó có giao diện đồ họa bóng bẩy, hay
http://jonas.nitro.dk/tig/[tig], có giao diện dòng lệnh làm việc rất tối với
các máy có kết nối chậm. Một lựa chọn khác là cài đặt máy chủ web, chạy lệnh *git instaweb*
và sử dụng bất kỳ trình duyệt web vao.

=== Bài tập===

Coi A, B, C, D là 4 lần commit thành công where B is the same as A except some files have been removed. We want to add the files back at D. How can we do this?

There are at least three solutions. Assuming we are at D:

  1. The difference between A and B are the removed files. We can create a patch representing this difference and apply it:

   $ git diff B A | git apply

  2. Since we saved the files back at A, we can retrieve them:

   $ git checkout A foo.c bar.h

  3. We can view going from A to B as a change we want to undo:

   $ git revert B

Lựa chọn nào là tốt nhất? Cái nào bạn thích nhất. It is easy to get what you want with Git, and often there are many ways to get it.
