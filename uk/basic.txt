== Базові операції ==

Перш ніж занурюватися в нетрі численних команд Git, спробуйте скористатися наведеними нижче простими прикладами, щоб трохи освоїтися. Кожен із них корисний, незважаючи на свою простоту. Насправді перші місяці використання Git я не виходив за рамки матеріалу цього розділу.

=== Збереження стану ===

Збираєтеся спробувати внести якісь радикальні зміни? Попередньо створіть знімок всіх файлів у поточному каталозі за допомогою команд

 $ git init
 $ git add .
 $ git commit -m "Моя перша резервна копія"

Тепер, якщо нові правки все зіпсували, можна відновити початкову версію:

 $ git reset --hard

Щоб зберегти стан знову:

 $ git commit -a -m "Друга резервна копія"

=== Додавання, видалення, перейменування ===

Наведений вище приклад відстежує лише ті файли, які існували при першому запуску *git add*. Якщо ви створили нові файли або підкаталоги, доведеться сказати Git'у:

 $ git add readme.txt Documentation

Аналогічно, якщо хочете, щоб Git забув про деякі файли:

 $ git rm kludge.h obsolete.c
 $ git rm -r incriminating/evidence/

Git видалить ці файли, якщо ви не видалили їх самі.

Перейменування файлу - це те ж саме, що й видалення старого імені та додавання нового. Для цього є *git mv*, яка має той же синтаксис, що і команда *mv*. наприклад:

 $ git mv bug.c feature.c

=== Розширені скасування/повернення ===

Іноді просто хочеться повернутися назад і забути всі зміни до певного моменту, тому що всі вони були неправильними. У такому випадку

 $ git log

покаже список останніх коммітов і їх хеші SHA1:

----------------------------------
commit 766f9881690d240ba334153047649b8b8f11c664
Author: Bob <bob@example.com>
Date:   Tue Mar 14 01:59:26 2000 -0800

    Замінив printf() на write().

commit 82f5ea346a2e651544956a8653c0f58dc151275c
Author: Alice <alice@example.com>
Date:   Thu Jan 1 00:00:00 1970 +0000

    Початковий комміт.
----------------------------------

Для вказівки комміта достатньо перших декількох символів його хешу, але можете скопіювати і весь хеш. Наберіть:

 $ git reset --hard 766f

для відновлення стану до зазначеного комміта і видалення всіх наступних безповоротно.

Можливо, іншим разом ви захочете швидко перескочити до старого стану. У цьому випадку наберіть

 $ git checkout 82f5

Ця команда перенесе вас назад у часі, зберігши при цьому більш нові комміти. Однак, як і у фантастичних фільмах про подорожі в часі, якщо тепер ви відредагуєте і закоммітите код, то потрапите в альтернативну реальність, тому що ваші дії відрізняються від тих, що були минулого разу.

Ця альтернативна реальність називається «гілкою» і <<branch,трохи пізніше ми поговоримо про це докладніше>>. А зараз просто запам'ятайте, що команда

 $ git checkout master

поверне вас назад у теперішнє. Крім того, щоб не отримувати попереджень від Git, завжди робіть commit або скидайте зміни перед запуском checkout.

Ще раз скористаємося аналогією з комп'ютерними іграми:

- *git reset --hard*: завантажує раніше збережену гру і видаляє всі версії, збережені після тількищо завантаженої.

- *git checkout*: завантажує стару гру, але якщо ви продовжуєте грати, стан гри буде відрізнятися від більш нових збережень, які ви зробили в перший раз. Будь-яка гра, яку ви тепер зберігаєте, потрапляє в окрему гілку, що представляє альтернативну реальність, в яку ви потрапили. <<branch,Ми обговоримо це пізніше>>.

Можна також відновити тільки певні файли і підкаталоги, перерахувавши їх імена після команди:

 $ git checkout 82f5 якийсь.файл інший.файл

Будьте уважні: така форма *checkout* може мовчки перезаписати файли. Щоб уникнути неприємних несподіванок, виконуйте commit перед checkout, особливо якщо ви тільки вивчаєте Git. Взагалі, якщо ви не впевнені у якісь операції, чи то команда Git чи ні, виконайте попередньо *git commit -a*.

Не любите копіювати і вставляти хеші? Використовуйте

 $ git checkout :/"Моя перша р"

для переходу на комміт, опис якого починається з наведеного рядка.

Можна також запитати 5-й з кінця збережений стан:

 $ git checkout master~5

=== Відкати ===

У залі суду пункти протоколу можуть викреслювати прямо під час слухання. Подібним чином і ви можете вибирати комміти для скасування.

 $ git commit -a
 $ git revert 1b6d

скасує комміт із заданим хешем. Відкат буде збережений у вигляді нового комміта. Можете запустити *git log*, щоб переконатися в цьому.

=== Создание списка изменений ===

Некоторым проектам нужен http://en.wikipedia.org/wiki/Changelog[список изменений] (changelog, прим. пер.). Создайте его такой командой:

 $ git log > ChangeLog

=== Скачивание файлов ===

Получить копию проекта под управлением Git можно, набрав

 $ git clone git://сервер/путь/до/файлов

Например, чтобы получить все файлы, которые я использовал для создания этого документа,

 $ git clone git://git.or.cz/gitmagic.git

Позже мы поговорим о команде *clone* подробнее.

=== Держа руку на пульсе ===

Если вы уже загрузили копию проекта с помощью *git clone*, можете обновить ее до последней версии, используя

 $ git pull

=== Безотлагательная публикация ===

Допустим, вы написали скрипт, которым хотите поделиться с другими. Можно просто предложить им скачивать его с вашего компьютера, но если они будут делать это когда вы дорабатываете его или добавляете экспериментальную функциональность, у них могут возникнуть проблемы. Очевидно, поэтому и существуют циклы разработки. Разработчики могут постоянно работать над проектом, но общедоступным они делают свой код только после того, как приведут его в приличный вид.

Чтобы сделать это с помощью Git, выполните в каталоге, где лежит ваш скрипт,

 $ git init
 $ git add .
 $ git commit -m "Первый релиз"

Затем скажите вашим пользователям запустить

 $ git clone ваш.компьютер:/путь/до/скрипта

чтобы загрузить ваш скрипт. Здесь подразумевается, что у них есть доступ по ssh. Если нет, запустите *git daemon* и скажите пользователям запустить эту команду вместо вышеприведенной:

 $ git clone git://ваш.компьютер/путь/до/скрипта

С этих пор всякий раз, когда ваш скрипт готов к релизу, выполняйте

 $ git commit -a -m "Следующий релиз"

и ваши пользователи смогут обновить свои версии, перейдя в каталог, с вашим скриптом и набрав

 $ git pull

Ваши пользователи никогда не наткнутся на версию скрипта, которую вы не хотите им показывать.

=== Что я сделал? ===

Выясните, какие изменения вы сделали со времени последнего коммита:

 $ git diff

Или со вчерашнего дня:

 $ git diff "@{yesterday}"

Или между определенной версией и версией, сделанной 2 коммита назад:

 $ git diff 1b6d "master~2"

В каждом случае на выходе будет патч, который может быть применен с помощью *git apply*. Попробуйте также:

 $ git whatchanged --since="2 weeks ago"

Часто вместо этого я использую для просмотра истории http://sourceforge.net/projects/qgit[qgit], из-за приятного интерфейса, или http://jonas.nitro.dk/tig[tig] с текстовым интерфейсом, который хорошо работает через медленное соединение. Как вариант, установите веб-сервер, введите *git instaweb* и запустите любой веб-браузер.

=== Упражнение ===

Пусть A, B, C, D — четыре последовательных коммита, где В отличается от A лишь несколькими удаленными файлами. Мы хотим вернуть эти файлы в D. Как мы можем это сделать?

Существует как минимум три решения. Предположим, что мы находимся на D.

  1. Разница между A и B — удаленные файлы. Мы можем создать патч, отражающий эти изменения, и применить его:

   $ git diff B A | git apply

  2. Поскольку в коммите A мы сохранили файлы, то можем восстановить их:

   $ git checkout A foo.c bar.h

  3. Мы можем рассматривать переход от A к B как изменения, которые хотим отменить:

   $ git revert B

Какой способ лучше? Тот, который вам больше нравится. С помощью Git легко получить желаемое, и часто существует много способов это сделать.
