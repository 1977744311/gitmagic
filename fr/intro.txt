== Introduction ==

Je vais me servir d'une analogie pour présenter la gestion de versions.  Référez-vous à http://fr.wikipedia.org/wiki/Gestion_de_versions[la page de wikipedia sur la gestion de versions] pour une explication plus saine.

=== Le travail comme un jeu ===

J'ai joué à des jeux vidéo presque toute ma vie. Par contre, je n'ai commencé à utiliser des systèmes de gestion de versions qu'à l'âge adulte. Je soupçonne ne pas être le seul et comparer les deux peut rendre les concepts plus simples à expliquer et à comprendre.

Pensez à l'édition de votre code, ou document, comme s'il sagissait de jouer à un jeu. Quand vous avez bien progressé, vous aimeriez faire une sauvegarde.  Pour cela, vous cliquez sur le bouton 'enregistrer' de votre éditeur de confiance.

Mais ceci va écraser l'ancienne version. C'est comme ces jeux anciens qui n'avaient qu'un emplacement : oui vous pouviez faire une sauvegarde, mais vous ne pouviez pas revenir dans un état précédent. Quel dommage alors que votre sauvegarde précédente pouvait éventuellement être située à un passage du jeu particulièrement amusant sur lequel vous seriez bien revenu un de ces jours. Ou pire encore, votre sauvegarde actuelle est dans un état qui ne permet pas de gagner, et vous devez tout recommencer à zéro.

=== Gestion de versions ===

Lorsque vous modifiez un document vous pouvez l'"Enregistrer Sous …" un nom de fichier différent, ou copier le fichier quelque part avant de l'enregistrer si vous voulez pouvoir profiter des anciennes versions. Vous pouvez même les compresser pour gagner de l'espace. C'est une forme primitive et laborieuse de gestion de versions. Les jeux vidéo se sont améliorés sur ce point depuis longtemps, un grand nombre proposant différents emplacements de sauvegarde automatiquement horodatés.

Rendons le problème légèrement plus coriace. Imaginez que vous ayez un ensemble de fichiers qui vont ensemble comme le code source d'un projet, ou bien les fichiers d'un site web. Dans ce cas, si vous voulez conserver une ancienne version, vous devez archiver le dossier en entier. Conserver un grand nombre de versions à la main n'est pas pratique.

Dans le cas de certains jeux vidéo, l'enregistrement d'une partie consiste vraiment en un dossier rempli de fichiers. Ces jeux cachent ce détail au joueur et présentent une interface adaptée pour gérer différentes versions de ce dossier.

Les systèmes de gestion de versions ne font pas autre chose. Ils ont tous de
belles interfaces pour gérer des dossiers de trucs. Vous pouvez enregistrer
l'état du dossier aussi souvent que vous voulez et vous pouvez recharger l'un
des états enregistrés plus tard. À la différence de la plupart des jeux vidéo,
ils sont généralement forts pour économiser l'espace. Typiquement, seuls
quelques fichiers changent d'une version à l'autre, et pas de beaucoup.
Stocker les differences au lieu de copies entièrement nouvelles économise de
l'espace.

=== Gestion Distribuée ===

Imaginez maintenant un jeu vidéo très difficile. Si difficile à terminer que plein de joueurs expérimentés de toute la planète décident de faire équipe et de partager leurs parties enregistrées pour essayer d'en venir à bout. http://fr.wikipedia.org/wiki/Speedrun[Les Speedruns] sont un exemple concret : des joueurs qui se spécialisent dans différents niveaux du même jeu collaborent pour produire des résultats surprenants.

Comment mettriez-vous en place un système pour qu'ils puissent accéder facilement aux sauvegardes les uns des autres ? Et puissent en mettre à disposition de nouvelles ?

Dans le passé, tous les projets utilisaient une gestion de version centralisée. Quelque part un serveur contenait l'ensemble des sauvegardes du jeux et personne d'autre. Chaque joueur conservait au plus quelques sauvegardes de parties sur sa machine. Quand un joueur voulait progresser, il téléchargeait les dernières sauvegardes du serveur, jouait un moment, sauvegardait puis téléchargeait (upload) sur le serveur pour mettre à disposition de tous les autres.

Qu'en était-il si pour une raison quelconque, un joueur voulait obtenir une partie enregistrée antérieurement ? Peut-être la sauvegarde actuelle de la partie était-elle dans un état sans possibilité de victoire parce que quelqu'un avait oublié de prendre un objet au niveau trois, et ils voudraient retrouver la dernière partie enregistrée au moment où la partie pouvait encore être gagnée. Ou peut-être veulent-ils comparer deux parties enregistrées précédemment pour voir le travail réalisé par un joueur précis.

Il peut y avoir beaucoup de raisons de vouloir voir une révision, mais le résultat est le même : ils doivent demander au serveur central cette partie précédement sauvegardée. Plus ils veulent de parties sauvegardées, plus ils doivent communiquer.

La nouvelle génération des systèmes de gestion de versions, dont Git fait partie, sont dit systèmes distribués et peuvent être vus comme une généralisation des systèmes centralisés. Quand les joueurs téléchargent du serveur principal ils obtiennent toutes les parties sauvegardées, pas uniquement la dernière. C'est comme s'ils faisaient un http://fr.wikipedia.org/wiki/Site_miroir[miroir] du serveur central.

Cette opération initiale de clônage peut être coûteuse, surtout s'il y a un long historique, mais c'est payant sur le long terme. Un avantage immédiat est que lorsque l'on désire une partie enregistrée, quelle qu'en soit la raison, aucune communication avec le serveur central n'est nécessaire.

=== Une superstition idiote ===

Un croyance populaire veut que les systèmes distribués ne soient pas adaptés aux projets qui ont besoin d'un dépôt central officiel. Rien n'est moins vrai. Photographier quelqu'un n'a jamais eu pour effet de voler son âme. De même, cloner le dépot principal ne diminue pas son importance.

une première approximation assez bonne est que tout ce qu'un système centralisé de gestion de versions peut faire, un système distribué bien conçu peut le faire en mieux. Les ressources réseau sont simplement plus coûteuses que les ressources locales. Bien que nous verrons éventuellement qu'il y a des inconvénients à l'approche distribuée, il est moins probable de faire des comparaisons erronées en utilisant cette approximation.

Un petit projet peut ne nécessiter qu'une fraction des fonctionnalités offertes par un tel système, mais utiliser un système qui ne passe pas à l'échelle pour les petits projets c'est comme utiliser les chiffres romains pour les calculs sur de petits nombres.

De plus, votre projet peut grossir au delà de vos prévisions de départ. Utiliser Git même pour les cas simples est comparable au fait d'avoir sur vous un couteau suisse même si vous l'utilisez surtout pour ouvrir des bouteilles. Le jour où vous avez besoin d'un tournevis vous serez content d'avoir plus qu'un simple tire-bouchon.

=== Conflits fusionnels ===

Pour aborder ce sujet, notre analogie avec le jeu vidéo serait trop tirée par les cheveux. En revanche, revenons au cas de l'édition d'un document.

Imaginons qu'Alice insère une ligne au début d'un fichier, et Bob en ajoute un à la fin de sa propre copie. Ils envoient tous les deux leurs modifications. La plupart des systèmes vont automatiquement déduire un traitement raisonnable des actions : accepter et fusionner leur modifications, ainsi les modifications d'Alices et de Bob sont appliquées.

Maintenant imaginez que tous les deux, Alice et Bob ont faits des modifications différentes de la même ligne. Il devient alors impossible de procéder sans intervention humaine. Celui qui envoie ses modifications en second est informé d'un _conflit de fusion_ (merge conflict), et doit choisir l'une des deux lignes, ou revoir complètement la ligne.

Des situations plus complexes se présentent. Les systèmes de gestion de versions s'occupent eux même des cas les plus simples, et laissent les cas difficiles aux humains. En général leur comportement est configurable.
