== Grundlegendes ==


Bevor wir uns in ein Meer von Git-Befehlen stürzen, schauen wir uns ein paar einfache Beispiele
an. Obwohl "einfach", sind alle davon wichtig und nützlich.
Um erhlich zu sein, meine ersten Monate mit Git brauchte ich nicht mehr als in diesem Kapitel beschrieben steht.

=== Abspeichern ===

Hast du irgendetwas dramatisches vor? 
Nur zu, aber speichere deinen aktuellen Stand lieber nochmal ab:

 $ git init
 $ git add .
 $ git commit -m "Mein erstes Backup"

Falls deine Änderungen etwas kaput gemacht haben, kannst du jetzt die alte Version wiederherstellen:

 $ git reset --hard

Falls alles geklappt hat, kannst du den neuen Stand speichern:

 $ git commit -a -m "Noch ein Backup"

==== Hinzufügen, Löschen, Verschieben  ====

Bisher kümmert sich git nur um Dateien die existierten als du das erste mal git add ausgeführt hast.
Für neue Dateien oder Verzeichnisse musst du git noch folgendes mitteilen:

 $ git add NEUE_DATEIEN...

Falls git eine Datei "Vergessen" soll:

 $ git rm ALTE_DATEI...

Eine Datei umzubenennen bedeutet im Endeffekt dasselbe wie sie zu löschen und unter neuem Namen hinzuzufügen. Git benutzt hierzu mv (selber syntax wie mv (1) 

 $ git mv ALTER_NAME NEUER_NAME

===  Fortgeschrittenes Rückgängigmachen/Wiederherstellen===

Es kann vorkommen das du jede Änderung ab einem bestimmten Zeitpunkt wegwerfen willst weil alles bockmist ist:

 $ git log

Zeight dir eine Liste der letzten Commits und die zugehörigen SHA1 hashes. Jetzt:

 $ git reset --hard SHA1_HASH

um den Stand des betreffenden Commits wieder herzustellen und alle nachfolgenden Änderungen für immer zu Verwerfen.

Ein anderes mal willst du nur kurz zu einem alten Stand springen, in diesem Fall:

 $ git checkout SHA1_HASH

Damit springst du in der Zeit zurück, erhältst aber neuere Änderungen. Aber, wie in jedem guten Sciencefiction Film: Wenn du jetzt etwas änderst, gelangst du in ein alternatives Universum. Wenn du dich das zweite mal anders als das erste Verhälst, änderst du nicht die Zukunft, du wechselst in eine paralele Realität

Diese Alternative Realität heist "Branch". Wir kommen später darauf zurück, aber merke dir schonmal den Namen.

 $ git checkout master

will take you back to the present. Also, to stop Git complaining, always
commit or reset your changes before running checkout.

To take the computer game analogy again:

- *`git reset --hard`*: load an old save and delete all saved games newer than the one just loaded.

- *`git checkout`*: load an old game, but if you play on, the game state will deviate from the newer saves you made the first time around. Any saved games you make now will end up in a separate branch representing the alternate reality you have entered. <<branch,We deal with this later>>.

You can choose only to restore particular files and subdirectories by appending them after the command:

 $ git checkout SHA1_HASH some.file another.file

Take care, as this form of *checkout* can silently overwrite files. To
prevent accidents, commit before running any checkout command, especially when
first learning Git. In general, whenever you feel unsure about any operation, Git command or not, first run *git commit -a*.

Don't like cutting and pasting hashes? Then use:

 $ git checkout :/"My first b"

to jump to the commit that starts with a given message.
You can also ask for the 5th-last saved state:

 $ git checkout master~5

==== Reverting ====

In a court of law, events can be stricken from the record. Likewise, you can pick specific commits to undo.

 $ git commit -a
 $ git revert SHA1_HASH

will undo just the commit with the given hash. The revert is recorded as a new
commit, which you can confirm by running *git log*.

=== Changelog Generation ===

Some projects require a http://en.wikipedia.org/wiki/Changelog[changelog].
Generate one by typing:

 $ git log > ChangeLog

=== Downloading Files ===

Get a copy of a project managed with Git by typing:

 $ git clone git://server/path/to/files

For example, to get all the files I used to create this site:

 $ git clone git://git.or.cz/gitmagic.git

We'll have much to say about the *clone* command soon.

=== The Bleeding Edge ===

If you've already downloaded a copy of a project using *git clone*, you can upgrade to the latest version with:

 $ git pull

=== Instant Publishing ===

Suppose you've written a script you'd like to share with others. You could just tell them to download from your computer, but if they do so while you're improving the script or making experimental changes, they could wind up in trouble.  Of course, this is why release cycles exist. Developers may work on a project frequently, but they only make the code available when they feel it is presentable.

To do this with Git, in the directory where your script resides:

 $ git init
 $ git add .
 $ git commit -m "First release"

Then tell your users to run:

 $ git clone your.computer:/path/to/script

to download your script. This assumes they have ssh access. If not, run *git daemon* and tell your users to instead run:

 $ git clone git://your.computer/path/to/script

From now on, every time your script is ready for release, execute:

 $ git commit -a -m "Next release"

and your users can upgrade their version by changing to the directory containing your script and typing:

 $ git pull

Your users will never end up with a version of your script you don't want them to see. Obviously this trick works for anything, not just scripts.

=== What Have I Done? ===

Find out what changes you've made since the last commit with:

 $ git diff

Or since yesterday:

 $ git diff "@{yesterday}"

Or between a particular version and 2 versions ago:

 $ git diff SHA1_HASH "master~2"

In each case the output is a patch that can be applied with *git apply*.
Try also:

 $ git whatchanged --since="2 weeks ago"

Often I'll browse history with http://sourceforge.net/projects/qgit[qgit]
instead, due to its slick photogenic interface, or
http://jonas.nitro.dk/tig/[tig], a text-mode interface that works well over
slow connections. Alternatively, install a web server, run *git instaweb* and
fire up any web browser.

=== Exercise ===

Let A, B, C, D be four successive commits where B is the same as A except some files have been removed. We want to add the files back at D and not at B. How can we do this?

There are at least three solutions. Assuming we are at D:

  1. The difference between A and B are the removed files. We can create a patch representing this difference and apply it:

   $ git diff B A | git apply

  2. Since we saved the files back at A, we can retrieve them:

   $ git checkout A FILES...

  3. We can view going from A to B as a change we want to undo:

   $ git revert B

Which choice is best? Whichever you prefer most. It is easy to get what you want with Git, and often there are many ways to get it.
