= Basic Tricks =

Rather than diving into a sea of Git commands, use these elementary examples to get your feet wet. Despite their simplicity, each of them are useful in real life.

== Saving State ==

When I'm about to attempt something drastic I like to save the current state, so I can go back and try again should things go awry.

 $ git-init-db  # for git-1.5 and up you can type "git-init" instead
 $ git-add .
 $ git-commit -m "my first backup"

to take a snapshot of all files in the current directory.

The above sequence of commands should be memorized, or placed in a script, as they will be reused frequently.

Then if something goes wrong, run:

 $ git-checkout HEAD .

to go back to where you were. To save the state again:

 $ git-commit -a -m "another backup"

=== Add, Delete, Rename ===

The above will only keep track of the files that were present when you first ran <tt>git-add</tt>. If you add new files or subdirectories, you'll have to tell Git:

 $ git-add NEWFILES...

Similarly, if you want Git to forget about certain files, maybe because you've deleted them

 $ git-rm OLDFILES...

Renaming a file is the same as removing the old name and adding the new name. There's also the shortcut <tt>git-mv</tt> which has the same syntax as the <tt>mv</tt> command. For example:

 $ git-mv OLDFILE NEWFILE

== Advanced Undo/Redo ==

Running:

 $ git-log

shows you a list of recent commits, and their SHA1 hashes. Then:

 $ git-checkout SHA1_HASH .

will load the previous state with the given hash.
Don't like cutting and pasting hashes? Then use:

 $ git-checkout "@{10 minutes ago}" .

Other time specifications work too. Or you can ask for the 5th-last saved state:

 $ git-checkout "@{5}" .

In some circumstances, it is preferable to type:

 $ git-commit -a
 $ git-revert SHA1_HASH

This appears to have the same affect, but <tt>git-log</tt> reveals that the fact that you loaded an old saved state has been recorded as new commit. In other words, you can have Git track you when you undo and redo.

Lastly, other times you might want:

 $ git-reset --hard SHA1_HASH

which restores the state to a given commit but also erases all newer commits from the record permanently.

To take the computer game analogy again, <tt>git-checkout</tt> is like loading a game, <tt>git-revert</tt> is like loading a game and recording this fact as a new saved game, and <tt>git-reset --hard</tt> is like loading an old save and deleting all saved games newer than the one just loaded.

== Dowloading Files ==

If a project uses Git to manage its files, you can get a copy with:

 $ git-clone server:/path/to/files

We'll have a lot more to say about the <tt>clone</tt> command later.

== Keeping Up-to-date  ==

If a project uses Git to manage its files, and you've already downloaded a copy using <tt>git-clone</tt>, you can upgrade to the latest released version with:

 $ git-pull

== Instant Publishing ==

Let's say you've written a script you'd like to share with others. You could just tell them to download from your computer, but if they do so while you're improving the script or making experimental changes, they'll get a bad version.

Of course, this is why release cycles exist. Code is written, and at certain points in time, when it's suitable for others, it gets released.

To do this with Git, in the directory where your script resides:

 $ git-init-db  # in git-1.5 just type git-init 
 $ git-add .
 $ git-commit -m "first release"

Then tell your users to type

 $ git-clone your.computer:/path/to/script

to download your script. From now on, every time your script is ready for release, type:

 $ git-commit -a -m "next release"

and your users can upgrade their version by changing to the directory containing your script and typing.

 $ git-pull

Your users will never wind up with a version of your script you don't want them to see. Obviously this trick works for anything, not just scripts.

== What Have I Done? ==

Find out what changes you've made since the last commit with:

 $ git-diff

Or since yesterday:

 $ git-diff "@{yesterday}"

Or between a particular version and 2 versions ago:

 $ git-diff SHA1_HASH "@{2}"
