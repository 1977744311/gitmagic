== Cloning Around ==

In older version control systems, checkout is the standard operation to get files. You checkout a bunch of files in the requested saved state.

In Git and other distributed version control systems, cloning is the standard operation. To get files you create a clone of the entire repository. In other words, you practically create a mirror of the central server. Anything the main repository can do, you can do.

=== Sync Computers ===

This is the reason I first used Git. I can tolerate making tarballs or using *rsync* for backups and basic syncing. But sometimes I edit on my laptop, other times on my desktop, and the two may not have talked to each other in between.

Initialize a Git repository and commit your files as above on one machine. Then on the other:

 $ git clone other.computer:/path/to/files

to create a second copy of the files and Git respository. From now on,

 $ git commit -a
 $ git pull other.computer:/path/to/files

will pull in the state of the files on the other computer into the one you're working on. If you've recently made conflicting edits in the same file, Git will let you know and you should commit again after resolving them.

Pushing is also possible. If you have not committed any changes on the other computer, you may type

 $ git push other.computer:/path/to/files

to push the current state to the other computer. Next time you're logged in to the other computer, run

 $ git checkout HEAD .

to update the files before working on them. Be aware that you'll lose any uncommitted changes when you do this. Because more care is required, I prefer sticking to pulls for this use case.

=== Classic Source Control ===

Initialize a Git repository for your files: 

 $ git init
 $ git add .
 $ git commit -m "Initial commit"

On the central server, initialize an empty Git repository with some name,
and start the Git daemon if necessary:

 $ GIT_DIR==proj.git git init
 $ git daemon --detach  # it might already be running

Some public hosts, such as http://repo.or.cz[repo.or.cz], will have a different method for setting up the initially empty Git repository, such as filling in a form on a webpage.

Push your project to the central server with:

 $ git push git://central.server/path/to/proj.git HEAD

We're ready. To check out source, a developer types

 $ git clone git://central.server/path/to/proj.git

After making changes, the code is checked in to the main server by:

 $ git commit -a
 $ git push

If the main server has been updated, the latest version needs to be checked out before the push. To sync to the latest version:

 $ git commit -a
 $ git pull

=== Forking a Project ===

Sick of the way a project is being run? Think you could do a better job? Then on your server:

 $ git clone git://main.server/path/to/files

Next tell everyone to check out your fork of the project at your server.

At any later time, you can merge in the changes from the original project with:

 $ git pull

=== Ultimate Backups ===

Want numerous tamper-proof geographically diverse redundant archives? If your project has many developers, don't do anything! Every clone of your code is effectively a backup. Not just of the current state of the project, but of your project's entire history. Thanks to cryptographic hashing, if anyone's clone becomes corrupted, it will be spotted as soon as they try to communicate with others.

If your project is not so popular, find as many servers as you can to host clones.

The truly paranoid should always write down the latest 20-byte SHA1 hash of the HEAD somewhere safe. It has to be safe, not private. For example, publishing it in a newspaper would work well, because it's hard for an attacker to alter every copy of a newspaper.

=== Light-Speed Multitask ===

Say you want to work on several features in parallel. Then after committing your project:

 $ git clone --local --shared . /some/new/directory

The options can be written as *-l -s* instead, which I like to think of as an acronym for "Light Speed"!

Git exploits hard links and file sharing as much as possible to create this clone. Subsequently, this clone is unsuitable as a backup. However, it's ready in a flash, and you can now work on two independent features simultaneously. For example, you can edit one clone while the other is compiling.

At any time, you can commit and pull changes from the other clone.

 $ git pull /the/other/clone

=== Guerilla Version Control ===

Are you working on a project that uses some other version control system, and you sorely miss Git? Then initialize a Git repository in your working directory:

 $ git init
 $ git add .
 $ git commit -m "Initial commit"

then clone it, at light speed:

 $ git clone -l -s  . /some/new/directory

Now go to the new directory and work here instead, using Git to your heart's content. Once in a while, you'll want to sync with everyone else, in which case go to the original directory, sync using the other version control system, and type:

 $ git add .
 $ git commit -m "Sync with everyone else"

Then go to the new directory and run:

 $ git commit -a -m "Description of my changes"
 $ git pull

The procedure for giving your changes to everyone else depends on the other version control system. The new directory contains the files with your changes. Run whatever commands of the other version control system are needed to upload them to the central repository.
